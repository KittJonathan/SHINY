---
title: "Mastering Shiny - reading notes"
format: html
editor: visual
execute: 
  eval: false
---

# 1. Your first Shiny app

-   UI: user interface –\> how your app looks

-   server function –\> how your app works

-   reactive programming: automatically update outputs when inputs change

```{r, eval=FALSE}
install.packages("shiny")
```

```{r}
packageVersion("shiny")
library(shiny)
```

## Create app directory and file

To create a Shiny app:

-   create a new directory for the app, and put a single file called `app.R` in it.

```{r, eval=FALSE}
# Load the Shiny package
library(shiny)

# Define the User Interface
ui <- fluidPage(
  "Hello World!"
)

# Specify the app's behavior
server <- function(input, output, session) {
}

# Construct and start the Shiny app from UI & server
shinyApp(ui, server)
```

-   File \> New Project \> New Directory \> Shiny Web Application

-   Create the `app.R` file, and in the file type "shinyapp" then Shift + Tab

To run the app:

-   Click the **Run App** button in the document toolbar

-   `Ctrl + Shift + Enter`

-   outside RStudio –\> `source()` the whole document, or call `shiny::runApp()` with the path to the directory containing `app.R`.

In the console : `Listening on http://127.0.0.1:7316`

-   `127.0.0.1` is a standard address meaning "this computer"

-   `7316` is a random assigned port number

Enter that URL into a web browser to open another copy of the app.

To stop the app:

-   click on the Stop sign icon on the R console toolbar

-   click on the console, then press `Esc` (or press `Ctrl + C` is not using RStudio)

-   close the Shiny app window

If using RStudio, you don't need to stop and re-start the app when modifying it - press the Reload app button in the toolbok or use `Ctrl + Shift + Enter`.

## Adding UI controls

```{r, eval=FALSE}
# layout function to set up the basic visual structure of the page
ui <- fluidPage(
  # input control, lets the user interact with the app by providing a value
  selectInput("dataset", label = "Dataset",
              choices = ls("package:datasets")),
  # output control that displays code
  verbatimTextOutput("summary"),
  # output control that displays tables
  tableOutput("table")
)
```

## Adding behaviour

Shiny uses reactive programming to make apps interactive.

This involves telling Shiny how to perform a computation, not ordering Shiny to actually go do it. It's like the difference between giving someone a recipe versus demanding that they go make you a sandwich.

```{r, eval=FALSE}
server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}
```

The left-hand side of the assignment operator (`<-`), `output$ID`, indicates that you're providing the recipe for the Shiny output with that ID. The right-hand side of the assignment uses a specific **render function** to wrap some code that you'll provide.

Each `render{Type}` function is designed to produce a particular type of output (e.g. text, tables, and plots), and is often paired with a `{type}Output` function:

-   `renderPrint()` \<-\> `verbatimTextOutput()`

-   `renderTable()` \<-\> `tableOutput()`

Summary and table change whenever you change the input dataset. This is the essence of reactivity: outputs automatically react (recalculate) when their inputs change.

## Reducing duplication with reactive expressions

One line of code is duplicated:

```{r,eval=FALSE}
dataset <- get(input$dataset, "package:datasets")
```

Two techniques to deal with duplicates:

-   capture the value using a variable

-   capture the computation with a function

Here, these mechanisms don't work, and we need a new one: **reactive expressions**.

-   wrap a block of code in `reactive({...})` and assign it to a variable

-   a reactive expression is used by calling it like a function

    -   big difference with a function: a reactive expression only runs the first time it is called and then it caches its result until it needs to be updated

```{r, eval=FALSE}
server <- function(input, output, session) {
  # Create a reactive expression
  dataset <- reactive({
    get(input$dataset, "package:datasets")
  })
  
  output$summary <- renderPrint({
    # Use a reactive expression by calling it like a function
    summary(dataset())
  })
  
  output$table <- renderTable({
    dataset()
  })
}
```

# 2. Basic UI

## Inputs

### Common structure

All input functions have the same first argument: `inputId`. This is the identifier used to connect the front end with the back end: if you UI has an input with ID `"name"`, the server function will access it with `input$name`.

The `inputId` has two constraints:

-   it must be a simple string that contains only letters, numbers, and underscores (no spaces, dashes, periods, or other special characters allowed)

-   it must be unique. If it's not unique, you'll have no way to refer to this control in your server function.

Most input functions have a second parameter called `label`. This is used to create a human-readable label for the control. There are no restrictions on this label, but you'll need to carefully think about it to make sure that your app is usable by humans.

The third parameter is typically `value`, which, where possible, lets you set the default value. The remaining parameters are unique to the control.

When creating an input, it is recommended to supply the `inputId` and `label` arguments by position, and all other arguments by name:

```{r, eval=FALSE}
sliderInput("min", "Limit (minimum)", value = 50, min = 0, max = 100)
```

### Free text

```{r, eval=FALSE}
ui <- fluidPage(
  textInput("name", "What's your name?"),
  passwordInput("password", "What's your password?"),
  textAreaInput("story", "Tell me about yourself", rows = 3)
)
```

To ensure that the text has certain properties, you can use `validate()` (see in chapter 8).

### Numeric inputs

To collect numeric values, create a constrained text box with `numericInput()` or a slider with `sliderInput()`. You can get a "range" slider with two ends by supplying a length-2 numeric vector for the default value of `sliderInput()`.

```{r, eval=FALSE}
ui <- fluidPage(
  numericInput("num", "Number one", value = 0, min = 0, max = 100),
  sliderInput("num2", "Number two", value = 50, min = 0, max = 100),
  sliderInput("rng", "Range", value = c(10, 20), min = 0, max = 100)
)
```

It is recommended to use sliders only for small ranges, or cases when precision is not so important.

Sliders are extremely customisable: [Shiny - Using sliders](https://shiny.posit.co/r/articles/build/sliders/).

### Dates

Collect a single day with `dateInput()` or a range of two days with `dateRangeInput()`.

Additional arguments like `datedisabled` and `daysofweekdisabled` allow you to restrict the set of valid inputs.

```{r, eval=FALSE}
ui <- fluidPage(
  dateInput("dob", "When were you born?"),
  dateRangeInput("holiday", "When do you want to go on vacation next?")
)
```

For an international audience, set `format`, `language`, and `weekstart` so that the dates are natural to your users.

### Limited choices

Two different approaches to allow the user to choose from a prespecified set of options: `selectInput()` and `radioButtons()`.

```{r, eval=FALSE}
animals <- c("dog", "cat", "mouse", "bird", "other", "I hate animals")

ui <- fluidPage(
  selectInput("state", "What's your favourite state?", state.name),
  radioButtons("animal", "What's your favourite animal?", animals)
)
```

Radio buttons have 2 nice features: they show all possible options, making them suitable for short lists, and via the `choiceNames` / `choiceValues` arguments, they can display options other than just plain text.

-   `choiceNames` determines what is shown to the user

-   `choiceValues` determines what is returned to your server function

```{r, eval=FALSE}
ui <- fluidPage(
  radioButtons("rb", "Choose one:",
               choiceNames = list(
                 icon("angry"),
                 icon("smile"),
                 icon("sad-tear")
               ),
               choiceValues = list("angry", "happy", "sad"))
)
```

Dropdowns created with `selectInput()` take up the same amount of space, regardless of the number of options, making them more suitable for longer options. You can also set `multiple = TRUE` to allow the user to select multiple elements.

```{r, eval=FALSE}
ui <- fluidPage(
  "state", "What's your favourite state?", state.name,
  multiple = TRUE
)
```

If you have a very large set of possible options, you may want to use "server-side" `selectInput()` so that the complete set of possible options are not embedded in the UI (which can make it slow to load), but instead sent as needed by the server (read [here](https://shiny.posit.co/r/articles/build/selectize/#server-side-selectize)).

It's not possible to select multiple values with radio buttons, but there's an alternative that's conceptually similar: `checkboxGroupInput().`

```{r, eval=FALSE}
ui <- fluidPage(
  checkboxGroupInput("animal", "What animals do you like?", animals)
)
```

If you want a single checkbox for a single yes/no question, use `checkboxInput()`:

```{r, eval=FALSE}
ui <- fluidPage(
  checkboxInput("cleanup", "Clean up?", value = TRUE),
  checkboxInput("shutdown", "Shutdown?")
)
```

### File uploads

To allow the user to upload a file, use `fileInput()`:

```{r, eval=FALSE}
ui <- fluidPage(
  fileInput("upload", NULL)
)
```

### Action buttons

Let the user perform an action with `actionButton()` or `actionLink()`:

```{r, eval=FALSE}
ui <- fluidPage(
  actionButton("click", "Click me!"),
  actionLink("drink", "Drink me!", icon = icon("cocktail"))
)
```

Action links and buttons are most naturally paired with `oberveEvent()` or `eventReactive()` in the server function (see more later).

The appearance can be customised using the `class` argument by using one of `"btn-primary"`, `"btn-success"`, `"btn-info"`, `"btn-warning"`, `"btn-danger"`.

The size can be changed using `"btn-lg"`, `"btn-sm"`, `"btn-xs"`.

You can make buttons span the entire width of the element they are embedded within using `"btn-block"`.

```{r, eval=FALSE}
ui <- fluidPage(
  fluidRow(
    actionButton("click", "Click me!", class = "btn-danger"),
    actionButton("drink", "Drink me!", class = "btn-lg btn-success")
  ),
  fluidRow(
    actionButton("eat", "Eat me!", class = "btn-block")
  )
)
```

The `class` argument works by setting the `class` attribute of the underlying HTML, which affects how the element is styled. To see more options, read the documentation for Bootstrap, the CSS design system used by Shiny: [CSS · Bootstrap 3.3.6 Documentation - BootstrapDocs](https://bootstrapdocs.com/v3.3.6/docs/css/#buttons)

## Outputs

Outputs in the UI create placeholders that are later filled by the server function. Like inputs, outputs take a unique ID as their first argument: if your UI specification creates an output with ID `"plot"`, you'll access it in the server function with `output$plot`.

Each `output` function on the front end is coupled with a `render` function in the back end. There are three main types of output : text, tables and plots.

### Text

Output regular text with `textOutput()` and fixed code and console output with `verbatimTextOutput()`.

```{r, eval=FALSE}
ui <- fluidPage(
  textOutput("text"),
  verbatimTextOutput("code")
)

server <- function(input, output, session) {
  output$text <- renderText({
    "Hello friend!"
  })
  output$code <- renderPrint({
    summary(1:10)
  })
}
```

The `{}` are only required in render functions if you need to run multiple lines of code.

You should do as little computation in your render functions as possible, which means you can often omit them.

```{r, eval=FALSE}
server <- function(input, output, session) {
  output$text <- renderText("Hello friend!")
  output$code <- renderPrint(summary(1:10))
}
```

Two render functions that behave slightly differently:

-   `renderText()` combines the result into a single string, and is usually paired with `textOutput()`

-   `renderPrint()` prints the result, as in an R console, and is usually paired with `verbatimTextOutput()`

```{r, eval=FALSE}
ui <- fluidPage(
  textOutput("text"),
  verbatimTextOutput("print")
)

server <- function(input, output, session) {
  output$text <- renderText("hello!")
  output$print <- renderPrint("hello!")
}
```

This is equivalent to the difference between `cat()` and `print()` in base R.

### Tables

Two options for displaying data frames :

-   `tableOutput()` and `renderTable()` render a static table of data, showing all the data at once

-   `dataTableOutput()` and `renderDataTable()` render a dynamic table, showing a fixed number of rows along with controls to change which rows are visible

To get greater control over the output of `dataTableOutput()` the [reactable](https://glin.github.io/reactable/index.html)package is highly recommended.

```{r, eval=FALSE}
ui <- fluidPage(
  tableOutput("static"),
  dataTableOutput("dynamic")
)

server <- function(input, output, session) {
  output$static <- renderTable(head(mtcars))
  output$dynamic <- renderDataTable(mtcars, 
                                    options = list(pagelength = 5))
}
```

### Plots

You can display any type of R graphic (base, ggplot2, or otherwise) with `plotOutput()` and `renderPlot()`:

```{r, eval=FALSE}
ui <- fluidPage(
  plotOutput("plot", width = "400px")
)
server <- function(input, output, session) {
  output$plot <- renderPlot(plot(1:5), res = 96)
}
```

By default, `plotOutput()` will take up the full width of its container, and will be 400px high. You can override these defaults with the `height` and `width` arguments. We recommend always setting `res = 96` as that will make your Shiny plots match what you see in RStudio as closely as possible.

Plots are outputs that can also act as inputs. `plotOutput()` has a number of arguments like `click`, `dblclick`, and `hover`. If you pass these a string, like `click = "plot_click"`, they'll create a reactive input (`input$plot_click`) that you can use to handle user interaction on the plot, e.g. clicking on the plot.

### Downloads

You can let user download a file with `downloadButton()` or `downloadLink()`. These require new techniques in the server function.

# 3. Basic reactivity

## Introduction

The key idea of reactive programming is to specify a graph of dependencies so that when an input changes, all related outputs are automatically updated.

## The server function

The guts of every Shiny app look like this:

```{r, eval=FALSE}
library(shiny)

ui <- fluidPage(
  # front end interface
)

server <- function(input, output, session) {
  # back end logic 
}

shinyApp(ui, server)
```

The `ui` is simple because every user gets the same HTML.

The `server` is more complicated because every user needs to get an independent version of the app; when user A moves a slides, user B shouldn't see their outputs change.

To achieve this independence, Shiny invokes your `server()` function each time a new session starts. Just like any other R function, when the server function is called it creates a new local environment that is independent of every other invocation of the function. This allows each session to have a unique state, as well as isolating the variables created inside the function. This is why almost all of the reactive programming you'll do in Shiny will be inside the server function.

### Input

The `input` argument is a list-like object that contains all the input data sent from the browser, named according to the input ID.

If the UI contains a numeric input control with an input ID of `count` :

```{r, eval=FALSE}
ui <- fluidPage(
  numericInput("count", label = "Number of values", value = 100)
)
```

then you access the value of that input with `input$count`. It will initially contain the value `100` and it will be automatically updated as the user changes the value in the browser.

Unlike a typical list, `input` objects are read-only. If you attempt to modify an input inside the server function, you'll get an error :

```{r, eval=FALSE}
server <- function(input, output, session) {
  input$count <- 10
}

shinyApp(ui, server)

# Error in $<-: Can't modify read-only reactive value 'count'
```

`input` is selective about who is allowed to read it. To read from an `input`, you must be in a **reactive context** created by a function like `renderText()` or `reactive()`.

```{r, eval=FALSE}
server <- function(input, output, session) {
  message("The value of input$count is ", input$count)
}

shinyApp(ui, server)

# Error in input$count : 
#   Can't access reactive value 'count' outside of reactive consumer.
# ℹ Do you need to wrap inside reactive() or observe()?
```

### Output

`output` is also a list-like object named according to the output ID. You use it for sending output instead of receiving input. You always use the `output` object in concert with a `render` function :

```{r}
ui <- fluidPage(
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText("Hello human!")
}
```

The ID is quoted in the UI, not in the server.

The render function does two things :

-   it sets up a special reactive context that automatically tracks what inputs the output uses.

-   it converts the output of your R code into HTML suitable for display on a web page.

You'll get errors if :

-   you forget the `render` function

```{r}
server <- function(input, output, session) {
  output$greeting <- "Hello human!"
}

shinyApp(ui, server)

# Error in .subset2(x, "impl")$defineOutput(name, value, label) : 
#   Unexpected character object for output$greeting
# ℹ Did you forget to use a render function?
```

-   you attempt to read from an output

```{r}
server <- function(input, output, session) {
  message("The greeting is ", output$greeting)
}

shinyApp(ui, server)

# Error in output$greeting : Can't read output 'greeting'
```

## Reactive programming

```{r}
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText({
    paste0("Hello ", input$name, "!")
  })
}
```

When running the app, the greeting updates automatically as you type.

In this model, we only issue the instruction once. But Shiny performs the action every time we update `input$name`.

The code doesn't *tell* Shiny to create the string and send it to the browser, but instead, it informs Shiny *how it could* create the string if it needs to. It's up to Shiny when (and even if!) the code should be run.

It's Shiny's responsibility to decide when code is executed, not yours. Think of your app as providing Shiny with recipes, not giving it commands.

### Imperative vs declarative programming

-   In **imperative** programming, you issue a specific command and it's carried out immediately ("make me a sandwich").

-   in **declarative** programming, you express higher-level goals or describe important constraints, and rely on someone else to decide how and/or when to translate that into action ("ensure there is a sandwich in the refrigerator whenever I look inside of it").

### Laziness

A Shiny app will only ever do the minimal amount of work needed to update the output controls that you can currently see.

But this laziness comes with an important downside :

```{r}
server <- function(input, output, session) {
  output$greting <- renderText({
    paste0("Hello ", input$name, "!")
  })
}
```

This won't generate an error in Shiny, but it won't do what you want. The `greting` output doesn't exist, so the code inside `renderText()` will never be run.

### The reactive graph

To understand the order of execution in Shiny, you need to look at the **reactive graph**, which describes how inputs and outputs are connected.

![](images/clipboard-411555344.png)

This graph tells us that `greeting` will need to be recomputed whenever `name` is changed.

`greeting` has a **reactive dependency** on `name`.

### Reactive expressions

Reactive expressions reduce duplication in the reactive code by introducing additional nodes into the reactive graph.

```{r}
server <- function(input, output, session) {
  string <- reactive(paste0("Hello ", input$name, "!"))
  output$greeting <- renderText(string())
}
```

### Execution order

```{r}
server <- function(input, output, session) {
  output$greeting <- renderText(string())
  string <- reactive(paste0("Hello ", input$name, "!"))
}
```

This can be confusing. Make sure that reactive expressions and outputs only refer to things defined above, not below.

The order in which reactive code is run is determined only by the reactive graph, not by its layout in the server function.

## Reactive expressions

Reactive expressions are important because they give Shiny more information so that it can do less recomputation when inputs change, making apps more efficient, and they make it easier for humans to understand the app by simplifying the reactive graph.

-   Like inputs, you can use the results of a reactive expression in an output

-   Like outputs, reactive expressions depend on inputs and automatically know when they need updating

**Producers** refer to reactive inputs and expressions.

**Consumers** refer to reactive expressions and outputs.

![](images/clipboard-3962968825.png)

### The motivation

To compare two simulated datasets with a plot and a hypothesis test :

-   `freqpoly()` to visualise the two distributions with frequency polygons

-   `t_test()` to run a t-test to compare means and summarise the results with a string

```{r, eval=TRUE}
library(ggplot2)

freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
  df <- data.frame(
    x = c(x1, x2),
    g = c(rep("x1", length(x1)), rep("x2", length(x2)))
  )
  
  ggplot(df, aes(x, colour = g)) +
    geom_freqpoly(binwidth = binwidth, linewidth = 1) +
    coord_cartesian(xlim = xlim)
}

t_test <- function(x1, x2) {
  test <- t.test(x1, x2)
  
  # use sprintf to format t.test() results compactly
  sprintf(
    "p value: %0.3f\n[%0.2f, %0.2f]",
    test$p.value, test$conf.int[1], test$conf.int[2]
  )
}
```

Use these functions to compare two variables :

```{r, eval=TRUE}
x1 <- rnorm(100, mean = 0, sd = 0.5)
x2 <- rnorm(200, mean = 0.15, sd = 0.9)

freqpoly(x1, x2)
cat(t_test(x1, x2))
```

### The app

```{r}
ui <- fluidPage(
  fluidRow(
    column(
      4, "Distribution 1",
      numericInput("n1", label = "n", value = 1000, min = 1),
      numericInput("mean1", label = "𝞵", value = 0, step = 0.1),
      numericInput("sd1", label = "𝛔", value = 0.5, min = 0.1, step = 0.1)
      ),
    column(
      4, "Distribution 2",
      numericInput("n2", label = "n", value = 1000, min = 1),
      numericInput("mean2", label = "𝞵", value = 0, step = 0.1),
      numericInput("sd2", label = "𝛔", value = 0.5, min = 0.1, step = 0.1)
      ),
    column(
      4, "Frequency polygon",
      numericInput("binwidth", label = "Bin width",
                   value = 0.1, step = 0.1),
      sliderInput("range", label = "range", value = c(-3, 3),
                  min = -5, max = 5)
      
    )
  ),
  fluidRow(
    column(9, plotOutput("hist")),
    column(3, verbatimTextOutput("ttest"))
  )
)

server <- function(input, output, session) {
  output$hist <- renderPlot({
    x1 <- rnorm(input$n1, input$mean1, input$sd1)
    x2 <- rnorm(input$n2, input$mean2, input$sd2)
    
    freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)
  }, res = 96)
  
  output$ttest <- renderText({
    x1 <- rnorm(input$n1, input$mean1, input$sd1)
    x2 <- rnorm(input$n2, input$mean2, input$sd2)
    
    t_test(x1, x2)
  })
}
```

### The reactive graph

Shiny only looks at the output as a whole, so it will update both `x1` and `x2` every time one of `n1`, `mean1`, `sd1`, `n2`, `mean2` or `sd2` changes.

![](images/clipboard-2712026268.png)

-   The app s hard to understand because there are so many connections

-   The app is inefficient because it does more work than necessary

### Simplifying the graph

We refactor the existing code to pull out the repeated code into two new reactive expressions, `x1` and `x2` which simulate the data from the two distributions.

```{r}
server <- function(input, output, session) {
  x1 <- reactive(rnorm(input$n1, input$mean1, input$sd1))
  x2 <- reactive(rnorm(input$n2, input$mean2, input$sd2))
  
  output$hist <- renderPlot({
    freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
  }, res = 96)
  
  output$ttest <- renderText({
    t_test(x1(), x2())
  })
}
```

![](images/clipboard-2737501863.png)

Modules allow you to extract out repeated code for reuse, while guaranteeing that it's isolated from everything else in the app :

![](images/clipboard-522185787.png)

Whenever you copy and paste something once, you should consider extracting the repeated code out into a reactive expression.

### Why do we need reactive expressions?

While variables calculate the value only once, and functions calculate the values every time they're called, reactive expressions calculate the value only when it might have changed.

```{r}
server <- function(input, output, session) {
  x1 <- rnorm(input$n1, input$mean1, input$sd1)
  x2 <- rnorm(input$n2, input$mean2, input$sd2)
  
  output$hist <- renderPlot({
    freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)
  }, res = 96)
  
  output$ttest <- renderText({
    t_test(x1, x2)
  })
}

# Error in input$n1 : 
#   Can't access reactive value 'n1' outside of reactive consumer.
# ℹ Do you need to wrap inside reactive() or observe()?
```

```{r}
server <- function(input, output, session) {
  x1 <- function() rnorm(input$n1, input$mean1, input$sd1)
  x2 <- function() rnorm(input$n2, input$mean2, input$sd2)
  
  output$hist <- renderPlot({
    freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
  }, res = 96)
  
  output$ttest <- renderText({
    t_test(x1(), x2())
  })
}
```

## Controlling the timing of evaluation

```{r}
ui <- fluidPage(
  fluidRow(
    column(
      3,
      numericInput("lambda1", label = "lambda1", value = 3),
      numericInput("lambda2", label = "lambda2", value = 5),
      numericInput("n", label = "n", value = 1e4, min = 0)
    ),
    column(
      9,
      plotOutput("hist")
    )
  )
)

server <- function(input, output, session) {
  x1 <- reactive(rpois(input$n, input$lambda1))
  x1 <- reactive(rpois(input$n, input$lambda2))
  
  output$hist <- renderPlot({
    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
  }, res = 96)
}
```

![](images/clipboard-1173696236.png)

### Timed invalidation

`reactiveTimer()` is a reactive expression that has a dependency on a hidden input: the current time.

The following code uses an interval of 500ms so that the plot will update twice a second.

```{r}
server <- function(input, output, session) {
  timer <- reactiveTimer(500)
  
  x1 <- reactive({
    timer()
    rpois(input$n, input$lambda1)
  })
  
    x2 <- reactive({
    timer()
    rpois(input$n, input$lambda2)
  })
    
    output$hist <- renderPlot({
      freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
    }, res = 96)
}
```

![](images/clipboard-4222090763.png)

We use `timer()` in the reactive expressions that compute `x1()` and `x2()` : we call it, but don't use the value. This lets `x1` and `x2` take a reactive dependency on `timer`, without worrying about exactly what value it returns.

### On click

It's possible to create a big backlog of work for Shiny, and while it's working on the backlog, it can't respond to any new events.

We might want to require the user to opt-in to performing the expensive calculation by requiring them to click a button.

```{r}
ui <- fluidPage(
  fluidRow(
    column(
      3,
      numericInput("lambda1", label = "lambda1", value = 3),
      numericInput("lambda2", label = "lambda2", value = 5),
      numericInput("n", label = "n", value = 1e4, min = 0),
      actionButton("simulate", "Simulate!")
    ),
    column(
      9,
      plotOutput("hist")
    )
  )
)

server <- function(input, output, session) {
  
  x1 <- reactive({
    input$simulate
    rpois(input$n, input$lambda1)
  })
  
  x2 <- reactive({
    input$simulate
    rpois(input$n, input$lambda2)
  })
  
  output$hist <- renderPlot({
    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
  }, res = 96)
}
```

![](images/clipboard-3453540013.png)

This just introduces a new dependency: `x1()` and `x2()` will update when we click the simulate button, but they'll also continue to update when `lambda1`, `lambda2`, or `n` change. We want to replace the existing dependencies, not add to them.

We need `eventReactive()` which has two arguments:

-   the first argument specifies what to take a dependency on

-   the second argument specifies what to compute

This allows the app to only compute `x1()` and `x2()` when `simulate` is clicked :

```{r}
server <- function(input, output, session) {
  x1 <- eventReactive(input$simulate, {
    rpois(input$n, input$lambda1)
  })
  x2 <- eventReactive(input$simulate, {
    rpois(input$n, input$lambda2)
  })
  
  output$hist <- renderPlot({
    freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
  }, res = 96)
}
```

![](images/clipboard-496785792.png)

## 3.6 Observers

Sometimes you need to reach outside of the app and cause side-effects to happen elsewhere in the world :

-   saving a file to a shared network drive

-   sending data to a web API

-   updating a database

-   printing a debugging message to the console

`observeEvent()` is very similar to `eventReactive()`, it has two important arguments:

-   `eventExpr` : input or expression to take a dependency on

-   `handlerExpr` : the code that will be run

The following modification to `server()` means that every time that `name` is updated, a message will be sent to the console :

```{r}
ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  string <- reactive(paste0("Hello ", input$name, "!"))
  
  output$greeting <- renderText(string())
  
  observeEvent(input$name, {
    message("Greeting performed")
  })
}
```

Two important differences between `observeEvent()` and `eventReactive()` :

-   you don't assign the result of `observeEvent()` to a variable, so

-   you can't refer to it from other reactive consumers

Observers and outputs are closely related. You can think of outputs as having a special side-effect: updating the HTML in the user's browser. To emphasise this closenedd, we'll draw them the same way in the reactive graph:

![](images/clipboard-3291809784.png)
